/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BasicResponse,
  Event,
  HTTPValidationError,
} from '../models/index';
import {
    BasicResponseFromJSON,
    BasicResponseToJSON,
    EventFromJSON,
    EventToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface JoinByInviteApiInvitesInviteIdGetRequest {
    inviteId: string;
}

/**
 * 
 */
export class InvitesApi extends runtime.BaseAPI {

    /**
     * Join By Invite
     */
    async joinByInviteApiInvitesInviteIdGetRaw(requestParameters: JoinByInviteApiInvitesInviteIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Event>> {
        if (requestParameters['inviteId'] == null) {
            throw new runtime.RequiredError(
                'inviteId',
                'Required parameter "inviteId" was null or undefined when calling joinByInviteApiInvitesInviteIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/invites/{invite_id}`.replace(`{${"invite_id"}}`, encodeURIComponent(String(requestParameters['inviteId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
    }

    /**
     * Join By Invite
     */
    async joinByInviteApiInvitesInviteIdGet(requestParameters: JoinByInviteApiInvitesInviteIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Event> {
        const response = await this.joinByInviteApiInvitesInviteIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
