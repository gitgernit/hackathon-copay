/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BasicResponse,
  HTTPValidationError,
  Item,
  ItemRequest,
  OutputItem,
} from '../models/index';
import {
    BasicResponseFromJSON,
    BasicResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ItemFromJSON,
    ItemToJSON,
    ItemRequestFromJSON,
    ItemRequestToJSON,
    OutputItemFromJSON,
    OutputItemToJSON,
} from '../models/index';

export interface CreateItemApiItemsTransactionIdPostRequest {
    transactionId: string;
    itemRequest: ItemRequest;
}

export interface GetItemApiItemsTransactionIdItemIdGetRequest {
    transactionId: string;
    itemId: string;
}

export interface GetItemsApiItemsTransactionIdGetRequest {
    transactionId: string;
}

/**
 * 
 */
export class ItemsApi extends runtime.BaseAPI {

    /**
     * Create item in transaction
     * Create Item
     */
    async createItemApiItemsTransactionIdPostRaw(requestParameters: CreateItemApiItemsTransactionIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling createItemApiItemsTransactionIdPost().'
            );
        }

        if (requestParameters['itemRequest'] == null) {
            throw new runtime.RequiredError(
                'itemRequest',
                'Required parameter "itemRequest" was null or undefined when calling createItemApiItemsTransactionIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/items/{transaction_id}`.replace(`{${"transaction_id"}}`, encodeURIComponent(String(requestParameters['transactionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemRequestToJSON(requestParameters['itemRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     * Create item in transaction
     * Create Item
     */
    async createItemApiItemsTransactionIdPost(requestParameters: CreateItemApiItemsTransactionIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Item> {
        const response = await this.createItemApiItemsTransactionIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get item by itself ID
     * Get Item
     */
    async getItemApiItemsTransactionIdItemIdGetRaw(requestParameters: GetItemApiItemsTransactionIdItemIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OutputItem>> {
        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling getItemApiItemsTransactionIdItemIdGet().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling getItemApiItemsTransactionIdItemIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/items/{transaction_id}/{item_id}`.replace(`{${"transaction_id"}}`, encodeURIComponent(String(requestParameters['transactionId']))).replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OutputItemFromJSON(jsonValue));
    }

    /**
     * Get item by itself ID
     * Get Item
     */
    async getItemApiItemsTransactionIdItemIdGet(requestParameters: GetItemApiItemsTransactionIdItemIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OutputItem> {
        const response = await this.getItemApiItemsTransactionIdItemIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get items from transaction
     * Get Items
     */
    async getItemsApiItemsTransactionIdGetRaw(requestParameters: GetItemsApiItemsTransactionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Item>>> {
        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling getItemsApiItemsTransactionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/items/{transaction_id}`.replace(`{${"transaction_id"}}`, encodeURIComponent(String(requestParameters['transactionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ItemFromJSON));
    }

    /**
     * Get items from transaction
     * Get Items
     */
    async getItemsApiItemsTransactionIdGet(requestParameters: GetItemsApiItemsTransactionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Item>> {
        const response = await this.getItemsApiItemsTransactionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
