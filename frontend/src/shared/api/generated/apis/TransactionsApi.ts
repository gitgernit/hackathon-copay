/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {AppModelsItemItem, Transaction,} from '../models/index';
import {AppModelsItemItemFromJSON, TransactionFromJSON,} from '../models/index';

export interface AddItemToTransactionApiTransactionEventIdTransactionIdItemsPostRequest {
    eventId: string;
    transactionId: string;
    title: string;
    price: number;
    addAllUsers?: boolean;
}

export interface CreateTransactionApiTransactionEventIdPostRequest {
    eventId: string;
    title: string;
}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI {

    /**
     * Add Item To Transaction
     */
    async addItemToTransactionApiTransactionEventIdTransactionIdItemsPostRaw(requestParameters: AddItemToTransactionApiTransactionEventIdTransactionIdItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppModelsItemItem>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling addItemToTransactionApiTransactionEventIdTransactionIdItemsPost().'
            );
        }

        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling addItemToTransactionApiTransactionEventIdTransactionIdItemsPost().'
            );
        }

        if (requestParameters['title'] == null) {
            throw new runtime.RequiredError(
                'title',
                'Required parameter "title" was null or undefined when calling addItemToTransactionApiTransactionEventIdTransactionIdItemsPost().'
            );
        }

        if (requestParameters['price'] == null) {
            throw new runtime.RequiredError(
                'price',
                'Required parameter "price" was null or undefined when calling addItemToTransactionApiTransactionEventIdTransactionIdItemsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['price'] != null) {
            queryParameters['price'] = requestParameters['price'];
        }

        if (requestParameters['addAllUsers'] != null) {
            queryParameters['add_all_users'] = requestParameters['addAllUsers'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/transaction/{event_id}/{transaction_id}/items`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))).replace(`{${"transaction_id"}}`, encodeURIComponent(String(requestParameters['transactionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppModelsItemItemFromJSON(jsonValue));
    }

    /**
     * Add Item To Transaction
     */
    async addItemToTransactionApiTransactionEventIdTransactionIdItemsPost(requestParameters: AddItemToTransactionApiTransactionEventIdTransactionIdItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppModelsItemItem> {
        const response = await this.addItemToTransactionApiTransactionEventIdTransactionIdItemsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Transaction
     */
    async createTransactionApiTransactionEventIdPostRaw(requestParameters: CreateTransactionApiTransactionEventIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling createTransactionApiTransactionEventIdPost().'
            );
        }

        if (requestParameters['title'] == null) {
            throw new runtime.RequiredError(
                'title',
                'Required parameter "title" was null or undefined when calling createTransactionApiTransactionEventIdPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/transaction/{event_id}`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionFromJSON(jsonValue));
    }

    /**
     * Create Transaction
     */
    async createTransactionApiTransactionEventIdPost(requestParameters: CreateTransactionApiTransactionEventIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction> {
        const response = await this.createTransactionApiTransactionEventIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
