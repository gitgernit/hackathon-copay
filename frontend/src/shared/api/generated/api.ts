/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BaseGroup
 */
export interface BaseGroup {
    /**
     * 
     * @type {string}
     * @memberof BaseGroup
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface BasicResponse
 */
export interface BasicResponse {
    /**
     * 
     * @type {string}
     * @memberof BasicResponse
     */
    'detail': string;
}
/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    'price': number;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    'quantity': number;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    'sum': number;
}
/**
 * 
 * @export
 * @interface TelegramInputData
 */
export interface TelegramInputData {
    /**
     * 
     * @type {string}
     * @memberof TelegramInputData
     */
    'query_id': string | null;
    /**
     * 
     * @type {TelegramWebUser}
     * @memberof TelegramInputData
     */
    'user': TelegramWebUser;
    /**
     * 
     * @type {any}
     * @memberof TelegramInputData
     */
    'receiver': any;
    /**
     * 
     * @type {any}
     * @memberof TelegramInputData
     */
    'chat': any;
    /**
     * 
     * @type {string}
     * @memberof TelegramInputData
     */
    'chat_type': string | null;
    /**
     * 
     * @type {string}
     * @memberof TelegramInputData
     */
    'chat_instance': string | null;
    /**
     * 
     * @type {string}
     * @memberof TelegramInputData
     */
    'start_param': string | null;
    /**
     * 
     * @type {number}
     * @memberof TelegramInputData
     */
    'can_send_after': number | null;
    /**
     * 
     * @type {number}
     * @memberof TelegramInputData
     */
    'auth_date': number;
    /**
     * 
     * @type {string}
     * @memberof TelegramInputData
     */
    'hash': string;
}
/**
 * 
 * @export
 * @interface TelegramWebUser
 */
export interface TelegramWebUser {
    /**
     * 
     * @type {number}
     * @memberof TelegramWebUser
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof TelegramWebUser
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof TelegramWebUser
     */
    'last_name': string | null;
    /**
     * 
     * @type {string}
     * @memberof TelegramWebUser
     */
    'username': string | null;
    /**
     * 
     * @type {string}
     * @memberof TelegramWebUser
     */
    'language_code': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof TelegramWebUser
     */
    'is_premium'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TelegramWebUser
     */
    'added_to_attachment_menu'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TelegramWebUser
     */
    'allows_write_to_pm'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TelegramWebUser
     */
    'photo_url': string | null;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'token_type': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authenticate
         * @param {TelegramInputData} telegramInputData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateApiAuthTokenPost: async (telegramInputData: TelegramInputData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'telegramInputData' is not null or undefined
            assertParamExists('authenticateApiAuthTokenPost', 'telegramInputData', telegramInputData)
            const localVarPath = `/api/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(telegramInputData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingApiAuthPingGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Authenticate
         * @param {TelegramInputData} telegramInputData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticateApiAuthTokenPost(telegramInputData: TelegramInputData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticateApiAuthTokenPost(telegramInputData, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authenticateApiAuthTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingApiAuthPingGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pingApiAuthPingGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.pingApiAuthPingGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Authenticate
         * @param {TelegramInputData} telegramInputData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateApiAuthTokenPost(telegramInputData: TelegramInputData, options?: RawAxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.authenticateApiAuthTokenPost(telegramInputData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingApiAuthPingGet(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.pingApiAuthPingGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Authenticate
     * @param {TelegramInputData} telegramInputData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authenticateApiAuthTokenPost(telegramInputData: TelegramInputData, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authenticateApiAuthTokenPost(telegramInputData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Ping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public pingApiAuthPingGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).pingApiAuthPingGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create group
         * @summary Create Group
         * @param {BaseGroup} baseGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupApiGroupsPost: async (baseGroup: BaseGroup, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseGroup' is not null or undefined
            assertParamExists('createGroupApiGroupsPost', 'baseGroup', baseGroup)
            const localVarPath = `/api/groups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baseGroup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete group
         * @summary Delete Group
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupApiGroupsGroupIdDelete: async (groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteGroupApiGroupsGroupIdDelete', 'groupId', groupId)
            const localVarPath = `/api/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Group By Id
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByIdApiGroupsGroupIdGet: async (groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('groupByIdApiGroupsGroupIdGet', 'groupId', groupId)
            const localVarPath = `/api/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return events containing given user (by token)
         * @summary List Groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroupsApiGroupsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/groups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create group
         * @summary Create Group
         * @param {BaseGroup} baseGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupApiGroupsPost(baseGroup: BaseGroup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroupApiGroupsPost(baseGroup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.createGroupApiGroupsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete group
         * @summary Delete Group
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupApiGroupsGroupIdDelete(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroupApiGroupsGroupIdDelete(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.deleteGroupApiGroupsGroupIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Group By Id
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupByIdApiGroupsGroupIdGet(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupByIdApiGroupsGroupIdGet(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.groupByIdApiGroupsGroupIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return events containing given user (by token)
         * @summary List Groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGroupsApiGroupsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Group>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGroupsApiGroupsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.listGroupsApiGroupsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupsApiFp(configuration)
    return {
        /**
         * Create group
         * @summary Create Group
         * @param {BaseGroup} baseGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupApiGroupsPost(baseGroup: BaseGroup, options?: RawAxiosRequestConfig): AxiosPromise<Group> {
            return localVarFp.createGroupApiGroupsPost(baseGroup, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete group
         * @summary Delete Group
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupApiGroupsGroupIdDelete(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteGroupApiGroupsGroupIdDelete(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Group By Id
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByIdApiGroupsGroupIdGet(groupId: string, options?: RawAxiosRequestConfig): AxiosPromise<Group> {
            return localVarFp.groupByIdApiGroupsGroupIdGet(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return events containing given user (by token)
         * @summary List Groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroupsApiGroupsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Group>> {
            return localVarFp.listGroupsApiGroupsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
    /**
     * Create group
     * @summary Create Group
     * @param {BaseGroup} baseGroup 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public createGroupApiGroupsPost(baseGroup: BaseGroup, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).createGroupApiGroupsPost(baseGroup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete group
     * @summary Delete Group
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deleteGroupApiGroupsGroupIdDelete(groupId: string, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroupApiGroupsGroupIdDelete(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Group By Id
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupByIdApiGroupsGroupIdGet(groupId: string, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupByIdApiGroupsGroupIdGet(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return events containing given user (by token)
     * @summary List Groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public listGroupsApiGroupsGet(options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).listGroupsApiGroupsGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UtilsApi - axios parameter creator
 * @export
 */
export const UtilsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiUtilsHealthCheckGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/utils/health-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get items info from OFD bare string
         * @summary Ofd
         * @param {string} ofdString Bare string from QR code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ofdApiUtilsOfdPost: async (ofdString: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ofdString' is not null or undefined
            assertParamExists('ofdApiUtilsOfdPost', 'ofdString', ofdString)
            const localVarPath = `/api/utils/ofd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (ofdString !== undefined) {
                localVarQueryParameter['ofd_string'] = ofdString;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilsApi - functional programming interface
 * @export
 */
export const UtilsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UtilsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckApiUtilsHealthCheckGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckApiUtilsHealthCheckGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilsApi.healthCheckApiUtilsHealthCheckGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get items info from OFD bare string
         * @summary Ofd
         * @param {string} ofdString Bare string from QR code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ofdApiUtilsOfdPost(ofdString: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Item>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ofdApiUtilsOfdPost(ofdString, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilsApi.ofdApiUtilsOfdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UtilsApi - factory interface
 * @export
 */
export const UtilsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UtilsApiFp(configuration)
    return {
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiUtilsHealthCheckGet(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.healthCheckApiUtilsHealthCheckGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get items info from OFD bare string
         * @summary Ofd
         * @param {string} ofdString Bare string from QR code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ofdApiUtilsOfdPost(ofdString: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Item>> {
            return localVarFp.ofdApiUtilsOfdPost(ofdString, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UtilsApi - object-oriented interface
 * @export
 * @class UtilsApi
 * @extends {BaseAPI}
 */
export class UtilsApi extends BaseAPI {
    /**
     * 
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsApi
     */
    public healthCheckApiUtilsHealthCheckGet(options?: RawAxiosRequestConfig) {
        return UtilsApiFp(this.configuration).healthCheckApiUtilsHealthCheckGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get items info from OFD bare string
     * @summary Ofd
     * @param {string} ofdString Bare string from QR code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsApi
     */
    public ofdApiUtilsOfdPost(ofdString: string, options?: RawAxiosRequestConfig) {
        return UtilsApiFp(this.configuration).ofdApiUtilsOfdPost(ofdString, options).then((request) => request(this.axios, this.basePath));
    }
}



