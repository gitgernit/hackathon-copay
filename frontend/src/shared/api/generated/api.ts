/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BasicResponse
 */
export interface BasicResponse {
    /**
     * 
     * @type {string}
     * @memberof BasicResponse
     */
    'detail': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface TelegramInputData
 */
export interface TelegramInputData {
    /**
     * 
     * @type {string}
     * @memberof TelegramInputData
     */
    'query_id': string | null;
    /**
     * 
     * @type {TelegramWebUser}
     * @memberof TelegramInputData
     */
    'user': TelegramWebUser;
    /**
     * 
     * @type {any}
     * @memberof TelegramInputData
     */
    'receiver': any;
    /**
     * 
     * @type {any}
     * @memberof TelegramInputData
     */
    'chat': any;
    /**
     * 
     * @type {string}
     * @memberof TelegramInputData
     */
    'chat_type': string | null;
    /**
     * 
     * @type {string}
     * @memberof TelegramInputData
     */
    'chat_instance': string | null;
    /**
     * 
     * @type {string}
     * @memberof TelegramInputData
     */
    'start_param': string | null;
    /**
     * 
     * @type {number}
     * @memberof TelegramInputData
     */
    'can_send_after': number | null;
    /**
     * 
     * @type {number}
     * @memberof TelegramInputData
     */
    'auth_date': number;
    /**
     * 
     * @type {string}
     * @memberof TelegramInputData
     */
    'hash': string;
}
/**
 * 
 * @export
 * @interface TelegramWebUser
 */
export interface TelegramWebUser {
    /**
     * 
     * @type {number}
     * @memberof TelegramWebUser
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof TelegramWebUser
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof TelegramWebUser
     */
    'last_name': string | null;
    /**
     * 
     * @type {string}
     * @memberof TelegramWebUser
     */
    'username': string | null;
    /**
     * 
     * @type {string}
     * @memberof TelegramWebUser
     */
    'language_code': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof TelegramWebUser
     */
    'is_premium'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TelegramWebUser
     */
    'added_to_attachment_menu'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TelegramWebUser
     */
    'allows_write_to_pm'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TelegramWebUser
     */
    'photo_url': string | null;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'token_type': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authenticate
         * @param {TelegramInputData} telegramInputData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateApiAuthTokenPost: async (telegramInputData: TelegramInputData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'telegramInputData' is not null or undefined
            assertParamExists('authenticateApiAuthTokenPost', 'telegramInputData', telegramInputData)
            const localVarPath = `/api/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(telegramInputData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiUtilsHealthCheckGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/utils/health-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingApiAuthPingGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Authenticate
         * @param {TelegramInputData} telegramInputData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticateApiAuthTokenPost(telegramInputData: TelegramInputData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticateApiAuthTokenPost(telegramInputData, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authenticateApiAuthTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckApiUtilsHealthCheckGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckApiUtilsHealthCheckGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthCheckApiUtilsHealthCheckGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingApiAuthPingGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pingApiAuthPingGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.pingApiAuthPingGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Authenticate
         * @param {TelegramInputData} telegramInputData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateApiAuthTokenPost(telegramInputData: TelegramInputData, options?: RawAxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.authenticateApiAuthTokenPost(telegramInputData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiUtilsHealthCheckGet(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.healthCheckApiUtilsHealthCheckGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingApiAuthPingGet(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.pingApiAuthPingGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Authenticate
     * @param {TelegramInputData} telegramInputData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authenticateApiAuthTokenPost(telegramInputData: TelegramInputData, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authenticateApiAuthTokenPost(telegramInputData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheckApiUtilsHealthCheckGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheckApiUtilsHealthCheckGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Ping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pingApiAuthPingGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).pingApiAuthPingGet(options).then((request) => request(this.axios, this.basePath));
    }
}



