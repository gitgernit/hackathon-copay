/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';

/**
 * 
 * @export
 * @interface OutputEvent
 */
export interface OutputEvent {
    /**
     * 
     * @type {string}
     * @memberof OutputEvent
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof OutputEvent
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof OutputEvent
     */
    owner: number;
    /**
     * 
     * @type {Array<User>}
     * @memberof OutputEvent
     */
    users: Array<User>;
    /**
     * 
     * @type {string}
     * @memberof OutputEvent
     */
    invite: string | null;
}

/**
 * Check if a given object implements the OutputEvent interface.
 */
export function instanceOfOutputEvent(value: object): value is OutputEvent {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('owner' in value) || value['owner'] === undefined) return false;
    if (!('users' in value) || value['users'] === undefined) return false;
    if (!('invite' in value) || value['invite'] === undefined) return false;
    return true;
}

export function OutputEventFromJSON(json: any): OutputEvent {
    return OutputEventFromJSONTyped(json, false);
}

export function OutputEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): OutputEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'id': json['id'],
        'owner': json['owner'],
        'users': ((json['users'] as Array<any>).map(UserFromJSON)),
        'invite': json['invite'],
    };
}

  export function OutputEventToJSON(json: any): OutputEvent {
      return OutputEventToJSONTyped(json, false);
  }

  export function OutputEventToJSONTyped(value?: OutputEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'id': value['id'],
        'owner': value['owner'],
        'users': ((value['users'] as Array<any>).map(UserToJSON)),
        'invite': value['invite'],
    };
}

