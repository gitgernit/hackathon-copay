name: hack

services:
  db:
    image: postgres:12
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - path: .env.template
        required: true
      - path: .env
        required: false
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - default
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark

  prestart:
    build:
      context: ./backend
    networks:
      - default
    depends_on:
      db:
        condition: service_healthy
        restart: true
    command: bash scripts/prestart.sh
    env_file:
      - path: .env.template
        required: true
      - path: .env
        required: false
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=production

  bot:
    restart: always
    networks:
      - default
    depends_on:
      backend:
        condition: service_healthy
        restart: true
    env_file:
      - path: .env.template
        required: true
      - path: .env
        required: false
    build:
      context: ./bot

  backend:
    restart: always
    networks:
      - default
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
        restart: true
    env_file:
      - path: .env.template
        required: true
      - path: .env
        required: false
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=production
    command: "fastapi run --workers 16 app/main.py"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/utils/health-check"]
      interval: 10s
      timeout: 5s
      retries: 5

    build:
      context: ./backend

  frontend:
    restart: always
    networks:
      - default
    ports:
      - 8081:80
    build:
      context: ./frontend
      args:
        - VITE_API_URL=https://${DOMAIN?Variable not set}/api
        - NODE_ENV=production
    env_file:
      - path: .env.template
        required: true
      - path: .env
        required: false

volumes:
  app-db-data:
