name: hack

services:
  db:
    image: postgres:12
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - path: .env.template
        required: true
      - path: .env
        required: false
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata


  adminer:
    image: adminer
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.hack-adminer-http.rule=Host(`adminer.${DOMAIN?Variable not set}`)
      - traefik.http.routers.hack-adminer-http.entrypoints=http
      - traefik.http.services.hack-adminer.loadbalancer.server.port=8080

  # prestart:
  #   build:
  #     context: ./backend
  #   networks:
  #     - traefik-public
  #     - default
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #       restart: true
  #   command: bash scripts/prestart.sh
  #   env_file:
  #     - path: .env.template
  #       required: true
  #     - path: .env
  #       required: false
  #   environment:
  #     - DOMAIN=${DOMAIN}
  #     - ENVIRONMENT=production

  backend:
    restart: always
    networks:
      - traefik-public
      - default
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
        restart: true
      # prestart:
      #   condition: service_completed_successfully
    env_file:
      - path: .env.template
        required: true
      - path: .env
        required: false
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=production

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/utils/health-check"]
      interval: 10s
      timeout: 5s
      retries: 5

    build:
      context: ./backend
    # labels:
    #   - traefik.enable=true
    #   - traefik.docker.network=traefik-public
    #   - traefik.constraint-label=traefik-public

    #   - traefik.http.services.hack-backend.loadbalancer.server.port=8000

    #   - traefik.http.routers.hack-backend-http.rule=Host(`api.${DOMAIN?Variable not set}`)
    #   - traefik.http.routers.hack-backend-http.entrypoints=http

  frontend:
    restart: always
    networks:
      - traefik-public
      - default
    ports:
      - 8081:80
    build:
      context: ./frontend
      args:
        - VITE_API_URL=https://api.${DOMAIN?Variable not set}
        - NODE_ENV=production
    # labels:
    #   - traefik.enable=true
    #   - traefik.docker.network=traefik-public
    #   - traefik.constraint-label=traefik-public

    #   - traefik.http.services.hack-frontend.loadbalancer.server.port=80

    #   - traefik.http.routers.hack-frontend-http.rule=Host(`${DOMAIN?Variable not set}`)
    #   - traefik.http.routers.hack-frontend-http.entrypoints=http
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      - traefik.http.services.hack-frontend.loadbalancer.server.port=80

      - traefik.http.routers.hack-frontend-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.routers.hack-frontend-http.entrypoints=http
    env_file:
      - path: .env.template
        required: true
      - path: .env
        required: false

volumes:
  app-db-data:

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: true
